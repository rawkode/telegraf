[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "5s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = "$HOSTNAME"
  omit_hostname = false

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "telegraf"
  username = ""
  password = ""
  retention_policy = ""
  write_consistency = "any"
  timeout = "5s"

[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  container_names = []
  timeout = "5s"
  perdevice = true
  total = false
  
[[inputs.cpu]]
[[inputs.system]]
[[inputs.influxdb]]
  urls = ["http://influxdb:8086/debug/vars"]
[[inputs.syslog]]
#   ## Specify an ip or hostname with port - eg., tcp://localhost:6514, tcp://10.0.0.1:6514
#   ## Protocol, address and port to host the syslog receiver.
#   ## If no host is specified, then localhost is used.
#   ## If no port is specified, 6514 is used (RFC5425#section-4.1).
  server = "tcp://localhost:6514"


# # Cisco GNMI telemetry input plugin based on GNMI telemetry data produced in IOS XR
# [[inputs.cisco_telemetry_gnmi]]
#  ## Address and port of the GNMI GRPC server
#  addresses = ["10.49.234.114:57777"]
#
#  ## define credentials
#  username = "cisco"
#  password = "cisco"
#
#  ## GNMI encoding requested (one of: "proto", "json", "json_ietf")
#  # encoding = "proto"
#
#  ## redial in case of failures after
#  redial = "10s"
#
#  ## enable client-side TLS and define CA to authenticate the device
#  # enable_tls = true
#  # tls_ca = "/etc/telegraf/ca.pem"
#  # insecure_skip_verify = true
#
#  ## define client-side TLS certificate & key to authenticate to the device
#  # tls_cert = "/etc/telegraf/cert.pem"
#  # tls_key = "/etc/telegraf/key.pem"
#
#  ## GNMI subscription prefix (optional, can usually be left empty)
#  ## See: https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#222-paths
#  # origin = ""
#  # prefix = ""
#  # target = ""
#
#  ## Define additional aliases to map telemetry encoding paths to simple measurement names
#  #[inputs.cisco_telemetry_gnmi.aliases]
#  #  ifcounters = "openconfig:/interfaces/interface/state/counters"
#
#  [[inputs.cisco_telemetry_gnmi.subscription]]
#   ## Name of the measurement that will be emitted
#   name = "ifcounters"
#
#   ## Origin and path of the subscription
#   ## See: https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#222-paths
#   ##
#   ## origin usually refers to a (YANG) data model implemented by the device
#   ## and path to a specific substructe inside it that should be subscribed to (similar to an XPath)
#   ## YANG models can be found e.g. here: https://github.com/YangModels/yang/tree/master/vendor/cisco/xr
#   origin = "openconfig-interfaces"
#   path = "/interfaces/interface/state/counters"
#
#   # Subscription mode (one of: "target_defined", "sample", "on_change") and interval
#   subscription_mode = "sample"
#   sample_interval = "10s"
#
#   ## Suppress redundant transmissions when measured values are unchanged
#   # suppress_redundant = false
#
#   ## If suppression is enabled, send updates at least every X seconds anyway
#   # heartbeat_interval = "60s"


# # Cisco model-driven telemetry (MDT) input plugin for IOS XR, IOS XE and NX-OS platforms
[[inputs.cisco_telemetry_mdt]]
#  ## Telemetry transport (one of: tcp, grpc)
  transport = "grpc"
#
#  ## Address and port to host telemetry listener
  service_address = ":57000"
#
#  ## Enable TLS for GRPC transport
#  # tls_cert = "/etc/telegraf/cert.pem"
#  # tls_key = "/etc/telegraf/key.pem"
#
#  ## Enable TLS client authentication and define allowed CA certificates
#  # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]
#
#  ## Define aliases to map telemetry encoding paths to simple measurement names
#[inputs.cisco_telemetry_mdt.aliases]
#  ifstats = "ietf-interfaces:interfaces-state/interface/statistics"
#  uptime = "Cisco-IOS-XR-shellutil-oper:system-time/uptime"
#  data-rate = "Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/latest/data-rate"
#  generic-counters = "Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/latest/generic-counters"

