# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all plugins
  interval = "10s"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Default data flushing interval for all outputs. You should not set this below
  # interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  # Run telegraf in debug mode
  debug = false
  # Override default hostname, if empty use os.Hostname()
  hostname = "{{ telegraf_hostname }}"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

{% if telegraf_ouptut_infulxdb %}
# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://localhost:8086"] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "telegraf" # required
  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # If not provided, will default to 0 (no timeout)
  # timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512
{% endif %}
{% if telegraf_ouptut_graphite %}
# Configuration for Graphite server to send metrics to
[[outputs.graphite]]
  # TCP endpoint for your graphite instance.
  # servers = ["localhost:2003"]
  servers ={{ telegraf_ouptut_graphite_servers|to_json }}
  # Prefix metrics name
  prefix = "{{ telegraf_ouptut_graphite_prefix }}"
  # timeout in seconds for the write connection to graphite
  timeout = 2
{% endif %}

{% if telegraf_ouptut_prometheus %}
# Configuration for the Prometheus client to spawn
[[outputs.prometheus_client]]
  ## Address to listen on
  listen = "0.0.0.0:9126"
{% endif %}

###############################################################################
#                                  INPUTS                                     #
###############################################################################

{% if telegraf_inputs_cpu %}
# Read metrics about cpu usage
[[inputs.cpu]]
  # Whether to report per-cpu stats or not
  percpu = true
  # Whether to report total system cpu stats or not
  totalcpu = true
  # Comment this line if you want the raw CPU time metrics
  drop = ["time_*"]
{% endif %}

{% if telegraf_inputs_disk %}
# Read metrics about disk usage by mount point
[[inputs.disk]]
  # By default, telegraf gather stats for all mountpoints.
  # Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points=["/"]
{% endif %}

{% if telegraf_inputs_diskio %}
# Read metrics about disk IO by device
[[inputs.diskio]]
  # By default, telegraf will gather stats for all devices including
  # disk partitions.
  # Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  # Uncomment the following line if you do not need disk serial numbers.
  # skip_serial_number = true

{% endif %}

{% if telegraf_inputs_mem %}
# Read metrics about memory usage
[[inputs.mem]]
  # no configuration
{% endif %}

{% if telegraf_inputs_swap %}
# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration
{% endif %}

{% if telegraf_inputs_system %}
# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration
{% endif %}

{% if telegraf_inputs_netstat %}
# Read metrics about TCP status such as established, time wait etc and UDP sockets counts.
[[inputs.netstat]]
  # no configuration
{% endif %}

{% if telegraf_inputs_net %}
# Read metrics about network interface usage
[[inputs.net]]
  # By default, telegraf gathers stats from any up interface (excluding loopback)
  # Setting interfaces will tell it to gather these explicit interfaces,
  # regardless of status.
  #
  # interfaces = ["eth0", ... ]
{% endif %}

{% if telegraf_inputs_aerospike %}
# Read stats from an aerospike server
[[inputs.aerospike]]
  # Aerospike servers to connect to (with port)
  # Default: servers = ["localhost:3000"]
  #
  # This plugin will query all namespaces the aerospike
  # server has configured and get stats for them.

  servers ={{ telegraf_aerospike_servers|to_json }}
{% endif %}

{% if telegraf_inputs_statsd %}
# Statsd Server
[[inputs.statsd]]
  ## Address and port to host UDP listener on
  service_address = "{{ telegraf_inputs_statsd_service_address }}"
  ## Delete gauges every interval (default=false)
  delete_gauges = {{ telegraf_inputs_statsd_delete_gauges|to_json }}
  ## Delete counters every interval (default=false)
  delete_counters = {{ telegraf_inputs_statsd_delete_counters|to_json }}
  ## Delete sets every interval (default=false)
  delete_sets = {{ telegraf_inputs_statsd_delete_sets|to_json }}
  ## Delete timings & histograms every interval (default=true)
  delete_timings = {{ telegraf_inputs_statsd_delete_timings|to_json }}
  ## Percentiles to calculate for timing & histogram stats
  percentiles = {{ telegraf_inputs_statsd_percentiles|to_json }}

  ## convert measurement names, "." to "_" and "-" to "__"
  convert_names = {{ telegraf_inputs_statsd_convert_names|to_json }}

  ## Parses tags in DataDog's dogstatsd format
  ## http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = {{ telegraf_inputs_statsd_parse_data_dog_tags|to_json }}

  ## Statsd data translation templates, more info can be read here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md#graphite
  # templates = [
  #     "cpu.* measurement*"
  # ]

  ## Number of UDP messages allowed to queue up, once filled,
  ## the statsd server will start dropping packets
  allowed_pending_messages = {{ telegraf_inputs_statsd_allowed_pending_messages }}

  ## Number of timing/histogram values to track per-measurement in the
  ## calculation of percentiles. Raising this limit increases the accuracy
  ## of percentiles but also increases the memory usage and cpu time.
  percentile_limit = {{ telegraf_inputs_statsd_percentile_limit }}

  ## UDP packet size for the server to listen for. This will depend on the size
  ## of the packets that the client is sending, which is usually 1500 bytes.
  udp_packet_size = {{ telegraf_inputs_statsd_udp_packet_size }}
{% endif %}

###############################################################################
#                              SERVICE INPUTS                                 #
###############################################################################
